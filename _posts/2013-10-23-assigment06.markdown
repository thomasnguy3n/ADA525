---
layout: post
title: "Assignment 06: Input & Output"
date:   2023-10-23 10:33:30 +0200
author: "TN"
---

***Introduction***

During this week's assignment, we were all handed Arduinos and had a session on how to work with this kind of technology, as well as how to read and adjust their sensors and mechanisms by coding in C++.

With this assignment in mind, we aimed to use the Arduino to measure a value and provide an output of the result.

***Work History***

I started researching the *Adafruit Feather Bluefruit Sense - nRF52840*, an Arduino board, to the extent of understanding its properties and mechanics. This Arduino is an all-in-one chip that includes components such as a gyroscope and accelerometer, which can measure temperature and movement values. This Arduino is a perfect fit for my final project where I need to move or shake the fan to make it blow.

I used this code to make the Arduino detect movement and activate a light when movement is sensed.

{% raw %}```C++
//Code in C++

#include <Arduino.h>
#include <Arduino_LSM6DS3.h>
#include <Adafruit_BMP280.h>

unsigned long prevMillis;
const int timeInterval = 500;
float x, y, z;
float xs = 0, ys = 0, zs = 0;
float prevX, prevY, prevZ;
int counter = 0;

void setup() {
  // Initialize serial communication at a baud rate of 9600.
  Serial.begin(9600);

  // Initialize the LSM6DS3 sensor.
  IMU.begin();

  // Configure pin A0 as an output for analog write.
  pinMode(A0, OUTPUT);
}

void loop() {
  // Read gyroscope data into the variables x, y, and z.
  IMU.readGyroscope(x, y, z);

  // Adjust the gyroscope data values.
  x = x - 4;
  y = y + 4.8;
  z = z + 2.75;

  // Measure the current time in milliseconds.
  unsigned long currentMillis = millis();

  // Check if it's time to print the gyroscope data.
  if (currentMillis - prevMillis > timeInterval) {
    Serial.print("X: ");
    Serial.println(x);
    Serial.print("Y: ");
    Serial.println(y);
    Serial.print("Z: ");
    Serial.println(z);

    // Update prevMillis with the current time.
    prevMillis = currentMillis;
  }

  // Calculate the absolute differences between current and previous gyroscope data.
  int changeX = abs(x - prevX);
  int changeY = abs(y - prevY);
  int changeZ = abs(z - prevZ);

  // Check if any of the differences are greater than 100.
  if (changeX > 100 || changeY > 100 || changeZ > 100) {
    // Turn on an external component (e.g., a motor or LED) connected to pin A0.
    analogWrite(A0, 1023);
    delay(1000); // Wait for 1 second.
  } else {
    // Turn off the external component by setting the analog output to 0.
    analogWrite(A0, 0);
  }
}
```{% endraw %}

This code was done with the help of Sigve.

I encountered a major issue while running the code and attempting to upload it to the Arduino. It took me a considerable amount of time to identify the mistake, which was the reason my code wasn't fully executing when uploading it to the Arduino. Initially, I had designated the *Adafruit Feather Bluefruit Sense* as my main board when creating a new project for this assignment. This choice was entirely incorrect, and I only realized it when I switched to the *Adafruit Feather nRF52840 Express*. After making this change, everything worked perfectly fine.

***Result***

After uploading the code file into the Arduino, I began reading and experimenting with the data I received from the device.

{% raw %}```Terminal
//Results from the terminal

X: -17.00
Y: 3.95
Z: -0.24
X: 3.51
Y: -0.69
Z: -0.85
X: -11.87
Y: 5.84
Z: 0.00
X: -26.28
Y: 4.43
Z: 1.35
X: -4.24
Y: 0.47
Z: 0.67
X: -54.11
Y: 11.76
Z: 0.98
X: 43.97
Y: -5.03
Z: 1.96
X: -19.01
Y: 0.71
Z: -0.18
X: -51.12
Y: 6.69
Z: 1.71
```{% endraw %}

Whenever I moved the Arduino that was connected to the device while it was running, new data appeared on the terminal. This data provided information on how the gyroscope sensor readings in the X, Y, and Z axes changed over time. I used Visual Studio Code as my IDE for this project. If I had used the Arduino IDE, I could have visualized the data in readable graphs.

The light was briefly activated every time I moved the Arduino, which indicated the success of this task.

![Your GIF Alt Text](https://im2.ezgif.com/tmp/ezgif-2-945f6a7bd6.gif){: style="display: block; margin: 0 auto; width: 300px; height: 350px;"}

***What's next***

As mentioned earlier, this assignment holds significant value for my final project involving the Arduino, especially in regard to the gyroscope. I can apply the concepts learned from this exercise to the fan project and make necessary adjustments to the code.

In my final project, my goal is to activate the fan by moving or shaking it, causing it to blow for a few seconds before gradually turning off unless it is shaken once more. Consequently, I wanted to further experiment with this concept using lights to determine its feasibility with the tools currently at my disposal.

{% raw %}```C++
//Code in C++
#include <Arduino.h>
#include <Arduino_LSM6DS3.h>
#include <Adafruit_BMP280.h>

unsigned long prevMillis;
const int timeInterval = 500;
float x, y, z;
float prevX, prevY, prevZ;
int lampPin = A0;
bool lampActive = false;

void setup() {
  Serial.begin(9600);
  IMU.begin();
  pinMode(lampPin, OUTPUT);
  digitalWrite(lampPin, LOW); // Ensure the lamp is initially off.
}

void loop() {
  IMU.readGyroscope(x, y, z);
  x = x - 4;
  y = y + 4.8;
  z = z + 2.75;

  unsigned long currentMillis = millis();

  if (currentMillis - prevMillis > timeInterval) {
    Serial.print("X: ");
    Serial.println(x);
    Serial.print("Y: ");
    Serial.println(y);
    Serial.print("Z: ");
    Serial.println(z);

    prevMillis = currentMillis;
  }

  int changeX = abs(x - prevX);
  int changeY = abs(y - prevY);
  int changeZ = abs(z - prevZ);

  if (changeX > 100 || changeY > 100 || changeZ > 100) {
    if (!lampActive) {
      // Turn on the lamp.
      digitalWrite(lampPin, HIGH);
      lampActive = true;
      delay(10000); // Keep the lamp on for 10 seconds.
      digitalWrite(lampPin, LOW); // Turn off the lamp after 10 seconds.
      lampActive = false;
    }
  }
  
  // Update the previous gyroscope data.
  prevX = x;
  prevY = y;
  prevZ = z;
}
```{% endraw %}

With this code, the light will remain activated for 10 seconds unless I make additional movements, which will extend its activation. This demonstrates the practical use of the gyroscope in my project, which I plan to fully implement.

My next focus is to gain a better understanding of the data I receive from the gyroscope sensor readings. The terminal continuously displays new numbers when I move the Arduino, and the light activates with even the slightest movement. I aim to comprehend the data more thoroughly, allowing me to fine-tune the code and make the light less sensitive, requiring more significant movements or shakes to activate.

I need to discuss further with professor Frikk regarding the power requirements and the parts needed for my project. I have no previous experience with power, volts, or whatsoever, so I need extra follow-up to make sure that I don't burn or destroy the Arduino.

***Sources***

- [Adafruit nRF52840](https://learn.adafruit.com/introducing-the-adafruit-nrf52840-feather/overview)
- [Arduino Tutorial](https://www.youtube.com/watch?v=nL34zDTPkcs&t=365s&ab_channel=Afrotechmods)