---
layout: post
title: "Assignment 08: Web interfaces, Thing -> Server -> Client"
date:   2023-11-21 10:33:30 +0200
author: "TN"
---

***Introduction***

This assignment is based on obtaining data from the sensors connected to the Arduino and then plotting it using a visualization tool on a web server. With this in mind, I will use the data gathered from the accelerometer sensor and plot it on a chart using NodeJS and ChartJS.

***Project Steps***

I started off by testing the accelerometer sensor in the Arduino, where I would print out the different data gathered from the X, Y, and Z axes.

After testing the sensor and confirming that the Arduino could print out the data gathered from the accelerometer, I began modifying the C++ code to send the data to the serial port.

{% raw %}```C++
#include <Arduino.h>
#include <Adafruit_BMP280.h>
#include <Wire.h>
#include <Arduino_LSM6DS3.h>

void setup() {
  Serial.begin(9600);    // For serial monitor
  Serial1.begin(9600);   // For serial port

  if (!IMU.begin()) {
    Serial.println("Failed to initialize LSM6DS3!");
    while (1);
  }
}

void loop() {
  float x, y, z;

  // Read accelerometer data
  IMU.readAcceleration(x, y, z);

  Serial.print(x);
  Serial.print(",");
  Serial.print(y);
  Serial.print(",");
  Serial.println(z);

  delay(1000); // Sends data every second
}
```{% endraw %}

After finishing the code for the Arduino, I began working on the web server and how it would interact with the data waiting in COM3 (serial port 3).

I used NodeJS with frameworks, libraries, and packages like Express to build the static web server, Socket.IO for communication between the client and the server, and serialport for receiving the data from the Arduino. ChartJS was also used for visualization.

The most crucial part of the coding in NodeJS was sorting and 'cleaning' the incoming data.

{% raw %}```Javascript
const express = require("express");
const app = express();
const http = require("http").Server(app);
const io = require("socket.io")(http);
const { SerialPort } = require("serialport");

const port = 3000;

let x_val = 0;
let y_val = 0;
let z_val = 0;
let output = "";
let current = "";

const serialPort = new SerialPort({
    path: "COM3",
    baudRate: 9600,
  });


serialPort.on("data", function (data) {
  output += data.toString();
  if (data.toString().includes("\n")) {
    current = output.split("\n")[0];
    const values = current.split(",");
    if (values.length >= 3) {
      x_val = parseFloat(values[0]);
      y_val = parseFloat(values[1]);
      z_val = parseFloat(values[2]);
    }
    output = output.split("\n")[1];
  }
});

app.use(express.static("public"));

app.get("/getData", (req, res) => {
  res.send({ x_val: x_val, y_val: y_val, z_val: z_val });
});

io.on("connection", (socket) => {
  console.log("a user connected");
  socket.on("disconnect", () => {
    console.log("user disconnected");
  });
});

http.listen(port, () => {
  console.log(`Server listening on port ${port}`);
});
```{% endraw %}

***Result***

![image](https://github.com/thomasnguy3n/ADA525/assets/142970936/6cc1b6b8-1e71-48d8-a50c-98a29b6be8e6){: style="display: block; margin: 0 auto; width: 2500px; height: 450px;"}

<div style="display: flex; justify-content: center; align-items: center; height: 50px;">
  <p>Screenshot of the updating chart</p>
</div>

![gif-video](https://github.com/thomasnguy3n/ADA525/assets/142970936/407512f4-fe6b-4c92-959b-33f82b2961f1){: style="display: block; margin: 0 auto; width: 500px; height: 450px;"}

<div style="display: flex; justify-content: center; align-items: center; height: 50px;">
  <p>Video of the Arduino and the updating chart</p>
</div>

***What now***

To be honest, I'm not really satisfied with the result. For future work and the final project, I will explore other charts or visual methods to display the data, as it seems not practical and intuitive.

I was inspired by Daniel's approach to this assignment, and I plan to implement something similar in my final project where it will display the fan, and rotate or move in the web server as it does in real-life. Not only that, but a timer that would display the remaining blow time of the fan would be interesting to have. This will notify the user when the fan is about to 'die' out and when to shake it to make it blow longer.

A setting function for the web server would also be interesting to have. I think at times it would be more pleasant to have the fan blow infinitely, and not only when you interact with it. I will do further research for that and Bluetooth connection.